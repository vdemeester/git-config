#!/bin/bash

# Set ref of upstream branch for a local branch

me=`basename $0`

usage () {
    # Call as: usage [EXITCODE] [USAGE MESSAGE]
    exit_code=1
    if [[ "$1" == [0-9] ]]; then
        exit_code="$1"
        shift
    fi
    if [ -n "$1" ]; then
        echo "$*" >&2
        echo
    fi

    cat <<EOF >&2
Usage: $me [<local branch>] <upstream remote/branch>
Sets a branch (HEAD by default) to track a remote branch.
EOF
    exit "$exit_code"
}

set_upstream () {
    if [ $# -eq 1 ]; then
        set -- `git head` "$1"
    fi

    local_branch="$1"
    remote_ref="$2"

    if git branch -h 2>&1 | grep -q -- --set-upstream; then
        git branch --set-upstream "$local_branch" "$remote_ref"
    else
        git rev-parse "$remote_ref" >/dev/null || exit 1
        remote="${remote_ref%/*}"
        remote_branch="${remote_ref#*/}"
        [ "$remote" = "$remote_ref" ] && remote=.
        git config branch.$local_branch.remote "$remote"
        git config branch.$local_branch.merge  "$remote_branch"
        if [ "$remote" = '.' ]; then
            echo "Branch $local_branch set up to track local branch $remote_branch."
        else
            echo "Branch $local_branch set up to track remote branch $remote_branch from $remote."
        fi
    fi
}

root="`git root`"
if ! [ -d "$root" ]; then
    exit 1
fi

if [ "$1" == '-h' ] || [ "$1" == '--help' ] || [ $# -eq 0 ] || [ $# -gt 2 ]; then
    usage 0
fi

set_upstream "$@"
