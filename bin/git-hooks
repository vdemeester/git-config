#!/bin/bash
#
# Copyright (c) 2010-2012, Benjamin C. Meyer <ben@meyerhome.net>
# Copyright (c) 2012, Vincent Demeester <vincent+git@demeester.fr>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the project nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
SELF=$(basename $0)

test -z "$XDG_CONFIG_HOME"   && XDG_CONFIG_HOME="$HOME/.config"
test -z "$GIT_HOOKS_USER"    && GIT_HOOKS_USER="$XDG_CONFIG_HOME/git/hooks"
test -z "$GIT_HOOKS_LOCAL"   && GIT_HOOKS_LOCAL=".hooks"

# The most important line in any shell program.
set -e

# There's a lot of different ways to do usage messages in shell scripts.
# This is my favorite: you write the usage message in a comment --
# typically right after the shebang line -- *BUT*, use a special comment prefix
# like `#/` so that its easy to pull these lines out.
#
#/ Usage: git-hooks [option] [command]
#/ Manage project, user and global git hooks for multiple repositories.
#/
#/ Commands:
#/      install             Replace existing hooks in this repository with a call to
#/                          git hooks run [hook].  Move old hooks directory to hooks.old.
#/      uninstall           Remove existing hooks in this repository and rename hooks.old
#/                          back to hooks.
#/      list                Show currently installed hooks.
#/      enable [hook]       Enable the specified hook, if no hook name is specified, all
#/                          hooks will be enabled.
#/      disable [hook]      Disable the specified hook, if no hook name is specified, all
#/                          hooks will be disabled.
#/      run [hook]          Run the hooks for the specifie hook (such as pre-commit).
#/      help                Show this usage documentation.

# This is the second part of the usage message technique: `grep` yourself
# for the usage message comment prefix and then cut off the first few
# characters so that everything lines up.
help() {
    grep '^#/' <"$0" | cut -c4-
    exit 0
}

hook_dirs() {
    if [ ! -z "${1}" ] ; then
        hook="/${1}"
    else
        hook=""
    fi
    echo "${HOME}/.git_hooks${hook}"
    GITDIR=`git rev-parse --git-dir`
    cd $GITDIR/..
    echo "${PWD}/git_hooks${hook}"
    echo "${PWD}/.githooks${hook}"
    eval echo "`git config hooks.global`"${hook}
}

list_hooks_in_dir() {
    find -L "${1}/" -perm +111 -type f 2>/dev/null | grep -v "^.$" | sort
}

run_hooks() {
    dir="${1}"
    if [[ -z ${dir} || ! -d "${dir}" ]] ; then
        echo "run_hooks requires a directory name as an argument."
        return 1
    fi
    shift 1
    for hook in `list_hooks_in_dir "${dir}"`
    do
        export last_run_hook="${hook} $@"
        if [ ! -z ${GIT_HOOKS_VERBOSE} ] ; then
            echo -n "@@ Running hook: "
            echo -n `basename \`dirname "${hook}"\``
            echo "/`basename "${hook}"`"
        fi
        ${hook} "$@"
    done
}

run_hook() {
    set -e
    hook=`basename "${1}"`
    if [ -z ${hook} ] ; then
        echo "run requires a hook argument"
        return 1
    fi
    shift 1
    for dir in `hook_dirs "${hook}"`; do
        if [ ! -d "${dir}" ] ; then
            continue
        fi
        run_hooks "${dir}" "$@"
    done
    set +e
}

install_hooks() {
    GITDIR=`git rev-parse --git-dir`
    if [ ! $? -eq 0 ] ; then
        echo "$1 must be run inside a git repository"
        return 1
    fi
    cd $GITDIR
    if [ "${1}" = "--install" ] ; then
        if [ -d hooks.old ] ; then
            echo "hooks.old already exists, perhaps you already installed?"
            return 1
        fi
        mv hooks hooks.old
        mkdir hooks
        cd hooks
        for file in applypatch-msg commit-msg post-applypatch post-checkout post-commit post-merge post-receive pre-applypatch pre-auto-gc pre-commit prepare-commit-msg pre-rebase pre-receive update
        do
            echo '#!/bin/bash
git-hooks run "$0" "$@"' > "${file}"
            chmod +x "${file}"
        done
    else
        if [ ! -d hooks.old ] ; then
            echo "Error, hooks.old doesn't exists, aborting uninstall to not destroy something"
            return 1
        fi
        rm -rf hooks
        mv hooks.old hooks
    fi
}

list_hooks() {
    GITDIR=`git rev-parse --git-dir`
    cat $GITDIR/hooks/pre-commit 2> /dev/null | grep 'git-hooks' > /dev/null 2> /dev/null
    if [ $? = 0 ] ; then
        echo "Git hooks ARE installed in this repository."
        echo ""
    else
        echo "Git hooks are NOT installed in this repository."
        echo ""
    fi

    echo 'Listing User, Project, and Global hooks:'
    echo '---'
    for dir in `hook_dirs`; do
        echo "${dir}:"
        for hook in `list_hooks_in_dir "${dir}"` ; do
            echo -n `basename \`dirname "${hook}"\``
            echo -e "/`basename "${hook}"` \t- `${hook} --about`"
        done
        echo ""
    done
}

report_error() {
    echo "Hook failed: $last_run_hook"
    exit 1
}

case $1 in
    run )
        if [ ! -z "${GIT_DIR}" ] ; then
            unset GIT_DIR
        fi
        shift
        trap report_error ERR
        run_hook "$@"
        ;;
    install )
        install_hooks
        ;;
    uninstall )
        uninstall_hooks
        ;;
    enable )
        enable_hooks $*
        ;;
    disable )
        disable_hooks $*
        ;;
    list )
        list_hooks
        ;;
    help|* )
        help
        ;;
esac
